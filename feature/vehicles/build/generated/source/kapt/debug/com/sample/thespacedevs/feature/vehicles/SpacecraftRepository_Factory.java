// Generated by Dagger (https://dagger.dev).
package com.sample.thespacedevs.feature.vehicles;

import com.sample.platform.hardware.ConnectivityApiManager;
import com.sample.platform.storage.InMemoryCache;
import com.sample.thespacedevs.feature.vehicles.services.SpacecraftApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SpacecraftRepository_Factory implements Factory<SpacecraftRepository> {
  private final Provider<ConnectivityApiManager> connectivityApiManagerProvider;

  private final Provider<InMemoryCache> inMemoryCacheProvider;

  private final Provider<SpacecraftApi> spacecraftApiProvider;

  public SpacecraftRepository_Factory(
      Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider,
      Provider<SpacecraftApi> spacecraftApiProvider) {
    this.connectivityApiManagerProvider = connectivityApiManagerProvider;
    this.inMemoryCacheProvider = inMemoryCacheProvider;
    this.spacecraftApiProvider = spacecraftApiProvider;
  }

  @Override
  public SpacecraftRepository get() {
    return newInstance(connectivityApiManagerProvider.get(), inMemoryCacheProvider.get(), spacecraftApiProvider.get());
  }

  public static SpacecraftRepository_Factory create(
      Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider,
      Provider<SpacecraftApi> spacecraftApiProvider) {
    return new SpacecraftRepository_Factory(connectivityApiManagerProvider, inMemoryCacheProvider, spacecraftApiProvider);
  }

  public static SpacecraftRepository newInstance(ConnectivityApiManager connectivityApiManager,
      InMemoryCache inMemoryCache, SpacecraftApi spacecraftApi) {
    return new SpacecraftRepository(connectivityApiManager, inMemoryCache, spacecraftApi);
  }
}
