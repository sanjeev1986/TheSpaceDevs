// Generated by Dagger (https://dagger.dev).
package com.sample.feature.launches.list;

import com.sample.feature.launches.services.LaunchApi;
import com.sample.platform.hardware.ConnectivityApiManager;
import com.sample.platform.storage.InMemoryCache;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LaunchRepository_Factory implements Factory<LaunchRepository> {
  private final Provider<ConnectivityApiManager> connectivityApiManagerProvider;

  private final Provider<InMemoryCache> inMemoryCacheProvider;

  private final Provider<LaunchApi> launchApiProvider;

  public LaunchRepository_Factory(Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider, Provider<LaunchApi> launchApiProvider) {
    this.connectivityApiManagerProvider = connectivityApiManagerProvider;
    this.inMemoryCacheProvider = inMemoryCacheProvider;
    this.launchApiProvider = launchApiProvider;
  }

  @Override
  public LaunchRepository get() {
    return newInstance(connectivityApiManagerProvider.get(), inMemoryCacheProvider.get(), launchApiProvider.get());
  }

  public static LaunchRepository_Factory create(
      Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider, Provider<LaunchApi> launchApiProvider) {
    return new LaunchRepository_Factory(connectivityApiManagerProvider, inMemoryCacheProvider, launchApiProvider);
  }

  public static LaunchRepository newInstance(ConnectivityApiManager connectivityApiManager,
      InMemoryCache inMemoryCache, LaunchApi launchApi) {
    return new LaunchRepository(connectivityApiManager, inMemoryCache, launchApi);
  }
}
