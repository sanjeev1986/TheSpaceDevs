// Generated by Dagger (https://dagger.dev).
package com.sample.feature.launches.list;

import com.sample.feature.launches.services.LaunchApi;
import com.sample.platform.hardware.ConnectivityApiManager;
import com.sample.platform.storage.InMemoryCache;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UpcomingLaunchesViewModelModule_ProvideSpacecraftRepositoryFactory implements Factory<LaunchRepository> {
  private final Provider<ConnectivityApiManager> connectivityApiManagerProvider;

  private final Provider<InMemoryCache> inMemoryCacheProvider;

  private final Provider<LaunchApi> launchApiProvider;

  public UpcomingLaunchesViewModelModule_ProvideSpacecraftRepositoryFactory(
      Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider, Provider<LaunchApi> launchApiProvider) {
    this.connectivityApiManagerProvider = connectivityApiManagerProvider;
    this.inMemoryCacheProvider = inMemoryCacheProvider;
    this.launchApiProvider = launchApiProvider;
  }

  @Override
  public LaunchRepository get() {
    return provideSpacecraftRepository(connectivityApiManagerProvider.get(), inMemoryCacheProvider.get(), launchApiProvider.get());
  }

  public static UpcomingLaunchesViewModelModule_ProvideSpacecraftRepositoryFactory create(
      Provider<ConnectivityApiManager> connectivityApiManagerProvider,
      Provider<InMemoryCache> inMemoryCacheProvider, Provider<LaunchApi> launchApiProvider) {
    return new UpcomingLaunchesViewModelModule_ProvideSpacecraftRepositoryFactory(connectivityApiManagerProvider, inMemoryCacheProvider, launchApiProvider);
  }

  public static LaunchRepository provideSpacecraftRepository(
      ConnectivityApiManager connectivityApiManager, InMemoryCache inMemoryCache,
      LaunchApi launchApi) {
    return Preconditions.checkNotNullFromProvides(UpcomingLaunchesViewModelModule.INSTANCE.provideSpacecraftRepository(connectivityApiManager, inMemoryCache, launchApi));
  }
}
